name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'refactor/*' ]
  pull_request:
    branches: [ main, 'refactor/*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_UI: ${{ github.repository }}/flask-ui
  IMAGE_NAME_GATEWAY: ${{ github.repository }}/lora-gateway

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: pond_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pond_data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cp .env.example .env || echo "No .env.example found"
        cat > .env << EOF
        POSTGRES_USER=pond_user
        POSTGRES_PASSWORD=test_password
        POSTGRES_DB=pond_data
        POSTGRES_PORT=5432
        PG_HOST=localhost
        REDIS_HOST=localhost
        REDIS_PORT=6379
        TESTING_MODE=true
        SIMULATE_DATA=true
        FLASK_ENV=testing
        FLASK_SECRET_KEY=test-secret-key
        EOF

    - name: Run linting
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        python -m mypy . --ignore-missing-imports || true

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Flask UI
      id: meta-ui
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for LoRa Gateway
      id: meta-gateway
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_GATEWAY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Flask UI
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.flask_ui
        push: true
        tags: ${{ steps.meta-ui.outputs.tags }}
        labels: ${{ steps.meta-ui.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push LoRa Gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.gateway
        push: true
        tags: ${{ steps.meta-gateway.outputs.tags }}
        labels: ${{ steps.meta-gateway.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: Check test results
      if: needs.test.result != 'success'
      run: |
        echo "Tests failed. Quality gate failed."
        exit 1

    - name: Check build results
      if: needs.build.result != 'success' && github.event_name == 'push'
      run: |
        echo "Build failed. Quality gate failed."
        exit 1

    - name: Quality gate passed
      run: |
        echo "âœ… All quality checks passed!"