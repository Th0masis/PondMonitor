name: Release Automation

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_UI: ${{ github.repository }}/flask-ui
  IMAGE_NAME_GATEWAY: ${{ github.repository }}/lora-gateway

permissions:
  contents: write
  packages: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}

    steps:
    - uses: actions/checkout@v4

    - name: Validate tag format
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Tag: $TAG"
        
        # Check if tag matches semantic versioning
        if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "✅ Valid semantic version tag: $TAG"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease
          if [[ $TAG =~ -[a-zA-Z] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "📦 Prerelease version detected"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "🚀 Stable release version detected"
          fi
        else
          echo "❌ Invalid tag format: $TAG"
          echo "Tag must follow semantic versioning: v1.0.0 or v1.0.0-alpha.1"
          exit 1
        fi

  create-release-package:
    name: Create Release Package  
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p release-package
        
        # Core application files
        cp -r src/ release-package/
        cp -r docker/ release-package/
        cp -r config/ release-package/
        cp -r requirements/ release-package/
        cp requirements.txt release-package/
        
        # Documentation for end users
        cp README.md release-package/
        cp docs/QUICKSTART.md release-package/
        cp docs/DEPLOYMENT.md release-package/
        
        # Startup scripts
        cp scripts/start-testing.sh release-package/
        
        # Create deployment archive
        tar -czf pondmonitor-${{ needs.validate-release.outputs.version }}.tar.gz -C release-package .
        zip -r pondmonitor-${{ needs.validate-release.outputs.version }}.zip release-package/
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          pondmonitor-*.tar.gz
          pondmonitor-*.zip

    - name: Check if CHANGELOG exists and updated
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "⚠️ CHANGELOG.md not found, creating minimal changelog"
        else
          echo "✅ CHANGELOG.md found"
        fi

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: pond_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pond_data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/test.txt

    - name: Set up test environment
      run: |
        cat > .env << EOF
        POSTGRES_USER=pond_user
        POSTGRES_PASSWORD=test_password
        POSTGRES_DB=pond_data
        POSTGRES_PORT=5432
        PG_HOST=localhost
        REDIS_HOST=localhost
        REDIS_PORT=6379
        TESTING_MODE=true
        SIMULATE_DATA=true
        FLASK_ENV=testing
        FLASK_SECRET_KEY=test-secret-key
        EOF

    - name: Run comprehensive tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Test Docker builds
      run: |
        docker build -f docker/dockerfile.flask_ui -t test-ui:${{ needs.validate-release.outputs.version }} .
        docker build -f docker/dockerfile.gateway -t test-gateway:${{ needs.validate-release.outputs.version }} .

  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Flask UI (local only)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.flask_ui
        platforms: linux/amd64
        push: false
        tags: pondmonitor-flask-ui:${{ needs.validate-release.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build LoRa Gateway (local only)  
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.gateway
        platforms: linux/amd64
        push: false
        tags: pondmonitor-gateway:${{ needs.validate-release.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test built images
      run: |
        echo "✅ Docker images built successfully for release ${{ needs.validate-release.outputs.version }}"
        docker images | grep pondmonitor

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-release, create-release-package]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: ./release-packages

    - name: Generate changelog
      id: changelog
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${{ needs.validate-release.outputs.version }}
        
        echo "Generating changelog for version $VERSION..."
        
        # Get previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -A1 "^$TAG$" | tail -1)
        
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          echo "No previous tag found, using first commit"
        fi
        
        echo "Changes since $PREV_TAG:"
        
        # Generate release notes
        cat > release-notes.md << EOF
        ## PondMonitor $VERSION
        
        ### 🚀 What's New
        
        $(git log --pretty=format:"- %s" ${PREV_TAG}..HEAD | head -20)
        
        ### 📦 Installation Options
        
        **For End Users (Production Deployment):**
        1. Download \`pondmonitor-$VERSION.tar.gz\` or \`pondmonitor-$VERSION.zip\`
        2. Extract the package
        3. Run: \`docker-compose up -d\`
        
        **For Developers (Full Repository):**
        \`\`\`bash
        git clone https://github.com/${{ github.repository }}.git
        cd PondMonitor
        git checkout $TAG
        ./scripts/start-testing.sh
        \`\`\`
        
        ### 🏗️ What's Included
        
        - ✅ Complete source code in organized \`src/\` structure
        - ✅ Docker configuration for containerized deployment  
        - ✅ Split requirements for different environments
        - ✅ Comprehensive documentation and setup guides
        - ✅ Testing scripts and automation tools
        
        ### 🔍 Full Changelog
        
        **Commits in this release:**
        $(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD)
        EOF
        
        echo "Generated release notes:"
        cat release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: PondMonitor ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        prerelease: ${{ needs.validate-release.outputs.prerelease == 'true' }}
        draft: false
        files: |
          release-packages/pondmonitor-${{ needs.validate-release.outputs.version }}.tar.gz
          release-packages/pondmonitor-${{ needs.validate-release.outputs.version }}.zip
          docker/docker-compose.yml
          docker/docker-compose.prod.yml
        generate_release_notes: true

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()

    steps:
    - name: Release notification
      run: |
        echo "## 🎉 Release ${{ needs.validate-release.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Download Options:" >> $GITHUB_STEP_SUMMARY
        echo "- **End Users**: Download \`pondmonitor-${{ needs.validate-release.outputs.version }}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Developers**: \`git clone\` and \`git checkout ${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Extract downloaded package and run:" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ New Project Structure:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Organized \`src/\` directory structure" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Split requirements for different environments" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Clean deployment packages for end users" >> $GITHUB_STEP_SUMMARY