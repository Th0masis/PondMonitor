name: Security Scanning

on:
  push:
    branches: [ main, 'refactor/*' ]
  pull_request:
    branches: [ main, 'refactor/*' ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check (dependency vulnerabilities)
      run: |
        pip freeze | safety check --json > safety-report.json || true
        cat safety-report.json || echo "No safety report generated"

    - name: Run bandit (Python security linting)
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ -f txt

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Flask UI image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.flask_ui
        tags: pondmonitor-flask-ui:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Gateway image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfile.gateway
        tags: pondmonitor-gateway:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on Flask UI
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pondmonitor-flask-ui:latest'
        format: 'sarif'
        output: 'trivy-flask-ui.sarif'

    - name: Run Trivy vulnerability scanner on Gateway
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pondmonitor-gateway:latest'
        format: 'sarif'
        output: 'trivy-gateway.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-flask-ui.sarif'
        category: 'trivy-flask-ui'

    - name: Upload Gateway scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-gateway.sarif'
        category: 'trivy-gateway'

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, docker-security, secrets-scan]
    if: always()

    steps:
    - name: Security scan results
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.codeql.result }}" == "success" ]]; then
          echo "✅ CodeQL Analysis: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ CodeQL Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ Dependency Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Dependency Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.docker-security.result }}" == "success" ]]; then
          echo "✅ Docker Security: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Docker Security: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
          echo "✅ Secrets Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Secrets Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi